cabal-version:      3.0

name:               zkfold-base
version:            0.1.0.0
tested-with:        GHC ==9.6.4
synopsis:           ZkFold Symbolic compiler and zero-knowledge proof protocols
homepage:           https://zkfold.io/
category:           Cryptography, DSL, Math, Symbolic Computation
author:             Vladimir Sinyakov, Pavel Sokolov, Murat Kasimov, Vladimir Morozov, Eitan Chatav, Ilya Baryshnikov
maintainer:         vlasin@zkfold.io
license:            MIT
license-file:       LICENSE
build-type:         Simple
Data-Files:
    tests/data/shabittestvectors/*.rsp

description:
  This package contains the base library for the ZkFold project. It includes zkFold Symbolic compiler and a number of zero knowledge proof protocols.
  The compiler translates a subset of Haskell into arithmetic circuits, which can be used to generate zero knowledge proofs.

Flag Pedantic
    Description: Enable pedantic build with -Werror
    Manual: True
    Default: False

common options
    default-language: Haskell2010
    ghc-options:
      -fwarn-redundant-constraints
      -Wall
      -Wcompat
      -Widentities
      -Wincomplete-record-updates
      -Wincomplete-uni-patterns
      -Wnoncanonical-monad-instances
      -Wpartial-fields
      -Wredundant-constraints
      -O2
      -threaded
    if flag(pedantic)
      ghc-options:
        -Werror
    default-extensions:
      BangPatterns,
      BinaryLiterals,
      ConstraintKinds,
      DataKinds,
      DefaultSignatures,
      DeriveDataTypeable,
      DeriveFoldable,
      DeriveFunctor,
      DeriveGeneric,
      DeriveTraversable,
      ExistentialQuantification,
      FlexibleContexts,
      FlexibleInstances,
      FunctionalDependencies,
      GADTs,
      GeneralizedNewtypeDeriving,
      InstanceSigs,
      KindSignatures,
      LambdaCase,
      MultiParamTypeClasses,
      MultiWayIf,
      NamedFieldPuns,
      NoImplicitPrelude,
      NoStarIsType,
      NumericUnderscores,
      OverloadedStrings,
      OverloadedLabels,
      PolyKinds,
      RankNTypes,
      RecordWildCards,
      ScopedTypeVariables,
      StandaloneDeriving,
      StandaloneKindSignatures,
      TupleSections,
      TypeApplications,
      TypeFamilies,
      ViewPatterns

common options-exe
    import: options
    ghc-options:
      -rtsopts
    ghc-prof-options:
      -with-rtsopts=-pj

library
    import: options
    exposed-modules:
      ZkFold.Base.Algebra.Basic.Class
      ZkFold.Base.Algebra.Basic.Field
      ZkFold.Base.Algebra.Basic.Number
      ZkFold.Base.Algebra.Basic.Permutations
      ZkFold.Base.Algebra.Basic.DFT
      ZkFold.Base.Algebra.Basic.VectorSpace
      ZkFold.Base.Algebra.EllipticCurve.BLS12_381
      ZkFold.Base.Algebra.EllipticCurve.BN254
      ZkFold.Base.Algebra.EllipticCurve.Pasta
      ZkFold.Base.Algebra.EllipticCurve.Class
      ZkFold.Base.Algebra.EllipticCurve.Ed25519
      ZkFold.Base.Algebra.EllipticCurve.Pairing
      ZkFold.Base.Algebra.Polynomials.Multivariate
      ZkFold.Base.Algebra.Polynomials.Multivariate.Groebner
      ZkFold.Base.Algebra.Polynomials.Multivariate.Monomial
      ZkFold.Base.Algebra.Polynomials.Multivariate.Polynomial
      ZkFold.Base.Algebra.Polynomials.Multivariate.Substitution
      ZkFold.Base.Algebra.Polynomials.Univariate
      ZkFold.Base.Control.HApplicative
      ZkFold.Base.Data.ByteString
      ZkFold.Base.Data.HFunctor
      ZkFold.Base.Data.Matrix
      ZkFold.Base.Data.Package
      ZkFold.Base.Data.Par1
      ZkFold.Base.Data.Product
      ZkFold.Base.Data.Sparse.Matrix
      ZkFold.Base.Data.Sparse.Vector
      ZkFold.Base.Data.Type
      ZkFold.Base.Data.Vector
      ZkFold.Base.Protocol.KZG
      ZkFold.Base.Protocol.Plonk
      ZkFold.Base.Protocol.Plonk.Prover
      ZkFold.Base.Protocol.Plonk.Verifier
      ZkFold.Base.Protocol.Plonkup
      ZkFold.Base.Protocol.Plonkup.LookupConstraint
      ZkFold.Base.Protocol.Plonkup.PlonkConstraint
      ZkFold.Base.Protocol.Plonkup.PlonkupConstraint
      ZkFold.Base.Protocol.Plonkup.Input
      ZkFold.Base.Protocol.Plonkup.Internal
      ZkFold.Base.Protocol.Plonkup.Proof
      ZkFold.Base.Protocol.Plonkup.Prover
      ZkFold.Base.Protocol.Plonkup.Prover.Polynomials
      ZkFold.Base.Protocol.Plonkup.Prover.Secret
      ZkFold.Base.Protocol.Plonkup.Prover.Setup
      ZkFold.Base.Protocol.Plonkup.Relation
      ZkFold.Base.Protocol.Plonkup.Setup
      ZkFold.Base.Protocol.Plonkup.Testing
      ZkFold.Base.Protocol.Plonkup.Utils
      ZkFold.Base.Protocol.Plonkup.Verifier
      ZkFold.Base.Protocol.Plonkup.Verifier.Commitments
      ZkFold.Base.Protocol.Plonkup.Verifier.Setup
      ZkFold.Base.Protocol.Plonkup.Witness
      ZkFold.Base.Protocol.Protostar
      ZkFold.Base.Protocol.Protostar.Accumulator
      ZkFold.Base.Protocol.Protostar.AccumulatorScheme
      ZkFold.Base.Protocol.Protostar.ArithmeticCircuit
      ZkFold.Base.Protocol.Protostar.CommitOpen
      ZkFold.Base.Protocol.Protostar.Commit
      ZkFold.Base.Protocol.Protostar.FiatShamir
      ZkFold.Base.Protocol.Protostar.Fold
      ZkFold.Base.Protocol.Protostar.Internal
      ZkFold.Base.Protocol.Protostar.Gate
      ZkFold.Base.Protocol.Protostar.Lookup
      ZkFold.Base.Protocol.Protostar.Oracle
      ZkFold.Base.Protocol.Protostar.Permutation
      ZkFold.Base.Protocol.Protostar.SpecialSound
      ZkFold.Base.Protocol.NonInteractiveProof
      ZkFold.Base.Protocol.NonInteractiveProof.Internal
      ZkFold.Base.Protocol.NonInteractiveProof.Prover
      ZkFold.Base.Protocol.NonInteractiveProof.Testing
      ZkFold.Prelude
      ZkFold.Symbolic.Algorithms.Hash.Blake2b
      ZkFold.Symbolic.Algorithms.Hash.Blake2b.Constants
      ZkFold.Symbolic.Algorithms.Hash.MiMC
      ZkFold.Symbolic.Algorithms.Hash.MiMC.Constants
      ZkFold.Symbolic.Algorithms.Hash.SHA2
      ZkFold.Symbolic.Algorithms.Hash.SHA2.Constants
      ZkFold.Symbolic.Cardano.Wrapper
      ZkFold.Symbolic.Cardano.Contracts.BatchTransfer
      ZkFold.Symbolic.Cardano.Contracts.RandomOracle
      ZkFold.Symbolic.Cardano.Types
      ZkFold.Symbolic.Cardano.Types.Address
      ZkFold.Symbolic.Cardano.Types.Basic
      ZkFold.Symbolic.Cardano.Types.Input
      ZkFold.Symbolic.Cardano.Types.Output
      ZkFold.Symbolic.Cardano.Types.Output.Datum
      ZkFold.Symbolic.Cardano.Types.OutputRef
      ZkFold.Symbolic.Cardano.Types.Transaction
      ZkFold.Symbolic.Cardano.Types.Value
      ZkFold.Symbolic.Cardano.UPLC
      ZkFold.Symbolic.Cardano.UPLC.Builtins
      ZkFold.Symbolic.Cardano.UPLC.Inference
      ZkFold.Symbolic.Cardano.UPLC.Inference.Internal
      ZkFold.Symbolic.Cardano.UPLC.Term
      ZkFold.Symbolic.Cardano.UPLC.Type
      ZkFold.Symbolic.Class
      ZkFold.Symbolic.Compiler
      ZkFold.Symbolic.Compiler.ArithmeticCircuit
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Instance
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Internal
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.Map
      ZkFold.Symbolic.Compiler.ArithmeticCircuit.MerkleHash
      ZkFold.Symbolic.Data.Bool
      ZkFold.Symbolic.Data.ByteString
      ZkFold.Symbolic.Data.Class
      ZkFold.Symbolic.Data.Combinators
      ZkFold.Symbolic.Data.Conditional
      ZkFold.Symbolic.Data.DiscreteField
      ZkFold.Symbolic.Data.Ed25519
      ZkFold.Symbolic.Data.Eq
      ZkFold.Symbolic.Data.Eq.Structural
      ZkFold.Symbolic.Data.FFA
      ZkFold.Symbolic.Data.List
      ZkFold.Symbolic.Data.Maybe
      ZkFold.Symbolic.Data.Ord
      ZkFold.Symbolic.Data.UInt
      ZkFold.Symbolic.Data.UTCTime
      ZkFold.Symbolic.Data.FieldElement
      ZkFold.Symbolic.Interpreter
      ZkFold.Symbolic.Ledger.Types
      ZkFold.Symbolic.Ledger.Types.Address
      ZkFold.Symbolic.Ledger.Types.Basic
      ZkFold.Symbolic.Ledger.Types.Bridge
      ZkFold.Symbolic.Ledger.Types.Contract
      ZkFold.Symbolic.Ledger.Types.Hash
      ZkFold.Symbolic.Ledger.Types.Input
      ZkFold.Symbolic.Ledger.Types.Output
      ZkFold.Symbolic.Ledger.Types.OutputRef
      ZkFold.Symbolic.Ledger.Types.Transaction
      ZkFold.Symbolic.Ledger.Types.Update
      ZkFold.Symbolic.Ledger.Types.Value
      ZkFold.Symbolic.Ledger.Validation.Bridge
      ZkFold.Symbolic.Ledger.Validation.Contract
      ZkFold.Symbolic.Ledger.Validation.Common
      ZkFold.Symbolic.Ledger.Validation.PrivateInput
      ZkFold.Symbolic.Ledger.Validation.PublicInput
      ZkFold.Symbolic.Ledger.Validation.Transaction
      ZkFold.Symbolic.Ledger.Validation.Update
      ZkFold.Symbolic.MonadCircuit
    build-depends:
      base                          >= 4.9 && < 5,
      adjunctions                           < 4.5,
      aeson                                 < 2.3,
      base64-bytestring                          ,
      binary                               < 0.11,
      -- TODO: remove `blake2` after refactoring of ZK protocols
      blake2                                < 0.4,
      bytestring                           < 0.12,
      containers                            < 0.7,
      cryptohash-sha256                    < 0.12,
      deepseq                          <= 1.5.0.0,
      distributive                               ,
      lens                                       ,
      mtl                                   < 2.4,
      optics                                < 0.5,
      parallel                          < 3.2.3.0,
      pretty-simple                         < 4.2,
      QuickCheck                           < 2.15,
      random                                < 1.3,
      semialign                             < 1.4,
      semigroups                                 ,
      split                               < 0.2.6,
      -- TODO: remove `swagger2` after moving the related code to `zkfold-prover`
      swagger2                                   ,
      text                                       ,
      tfp                                   < 1.1,
      these                                 < 1.3,
      type-errors                         < 0.2.1,
      vector                               < 0.14,
      vector-binary-instances               < 0.3
    hs-source-dirs: src

library zkfold-symbolic-examples
    import: options
    exposed-modules:
      ZkFold.Symbolic.Examples
    other-modules:
      Examples.BatchTransfer
      Examples.ByteString
      Examples.Conditional
      Examples.Constant
      Examples.Eq
      Examples.FFA
      Examples.Fibonacci
      Examples.LEQ
      Examples.MiMCHash
      Examples.ReverseList
      Examples.UInt
    build-depends:
      base,
      containers,
      deepseq,
      zkfold-base,
    hs-source-dirs: examples

test-suite zkfold-base-test
    import: options-exe
    type: exitcode-stdio-1.0
    ghc-options: 
        "-with-rtsopts=-A128M -AL256m -qb0 -qn4 -N"
    main-is: Main.hs
    other-modules:
      Tests.ArithmeticCircuit
      Tests.Arithmetization
      Tests.Arithmetization.Test1
      Tests.Arithmetization.Test2
      Tests.Arithmetization.Test3
      Tests.Arithmetization.Test4
      Tests.Binary
      Tests.Blake2b
      Tests.ByteString
      Tests.FFA
      Tests.Field
      Tests.GroebnerBasis
      Tests.Group
      Tests.NonInteractiveProof
      Tests.Pairing
      Tests.Permutations
      Tests.Plonkup
      Tests.Protostar
      Tests.SHA2
      Tests.UInt
      Tests.Univariate
      Tests.Univariate.Poly
      Tests.Univariate.PolyVec
    build-depends:
      base                          >= 4.9 && < 5,
      adjunctions                           < 4.5,
      binary                               < 0.11,
      bytestring                                 ,
      blake2                                     ,
      containers                                 ,
      deepseq                                    ,
      containers                                 ,
      directory                        <= 1.3.8.4,
      filepath                         <= 1.5.2.0,
      hspec                                < 2.12,
      QuickCheck                                 ,
      regex-tdfa                       <= 1.3.2.2,
      split                               < 0.2.6,
      vector                                     ,
      vector-algorithms                          ,
      zkfold-base                                ,
    hs-source-dirs: tests

benchmark polynomial-multiplication
    import:           options-exe
    main-is:          BenchPolyMul.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:
      -O3
    build-depends:
      base,
      array,
      deepseq,
      random,
      tasty-bench,
      vector,
      zkfold-base

benchmark compiler-benchmark
    import:           options-exe
    main-is:          BenchCompiler.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:
      -fprof-auto
      -fprof-cafs
      -O3
    build-depends:
      adjunctions,
      base,
      bytestring,
      containers,
      deepseq,
      tasty-bench,
      tasty-golden,
      zkfold-base,
      zkfold-symbolic-examples,
      time,
      vector,
      zkfold-base 

benchmark protostar 
    import:           options
    main-is:          BenchProtostar.hs
    hs-source-dirs:   bench
    type:             exitcode-stdio-1.0
    ghc-options:      
      -rtsopts
      -O3
    build-depends: 
      base, 
      array,
      containers,
      deepseq,
      random,
      tasty-bench,
      time,
      vector,
      zkfold-base 
